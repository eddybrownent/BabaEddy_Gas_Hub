{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\nvar initialState = {\n  products: [],\n  previousOrder: null\n};\nexport var cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialState,\n  reducers: {\n    addToCart: function addToCart(state, action) {\n      state.products = [].concat(_toConsumableArray(state.products), [action.payload]);\n    },\n    removeFromCart: function removeFromCart(state, action) {\n      var newCart = _toConsumableArray(state.products);\n      var productIndex = state.products.findIndex(function (product) {\n        return product.id == action.payload.id;\n      });\n      if (productIndex >= 0) {\n        newCart.splice(productIndex, 1);\n      } else {\n        console.log(\"can't remove product as its not in the cart\");\n      }\n      state.products = newCart;\n    },\n    emptyCart: function emptyCart(state, action) {\n      state.products = [];\n    },\n    setPreviousOrder: function setPreviousOrder(state, action) {\n      state.previousOrder = action.payload;\n    }\n  }\n});\nvar _cartSlice$actions = cartSlice.actions,\n  addToCart = _cartSlice$actions.addToCart,\n  removeFromCart = _cartSlice$actions.removeFromCart,\n  emptyCart = _cartSlice$actions.emptyCart,\n  setPreviousOrder = _cartSlice$actions.setPreviousOrder;\nexport { addToCart, removeFromCart, emptyCart, setPreviousOrder };\nexport var selectCartproducts = function selectCartproducts(state) {\n  return state.cart.products;\n};\nexport var selectCartproductsById = createSelector([selectCartproducts, function (_, id) {\n  return id;\n}], function (products, id) {\n  return products.filter(function (product) {\n    return product.id === id;\n  });\n});\nexport var selectCartTotal = createSelector(selectCartproducts, function (products) {\n  return products.reduce(function (total, product) {\n    return total + product.price;\n  }, 0);\n});\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","createSelector","initialState","products","previousOrder","cartSlice","name","reducers","addToCart","state","action","concat","_toConsumableArray","payload","removeFromCart","newCart","productIndex","findIndex","product","id","splice","console","log","emptyCart","setPreviousOrder","_cartSlice$actions","actions","selectCartproducts","cart","selectCartproductsById","_","filter","selectCartTotal","reduce","total","price","reducer"],"sources":["/home/edwin/BabaEddy_Gas_Hub/slices/cartSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { createSelector } from 'reselect';\n\nconst initialState = {\n  products: [],\n  previousOrder: null,\n}\n\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      state.products = [...state.products, action.payload];\n    },\n    removeFromCart: (state, action) => {\n      let newCart = [...state.products];\n      let productIndex = state.products.findIndex(product=> product.id==action.payload.id);\n      if(productIndex>=0){\n        newCart.splice(productIndex,1);\n      }else{\n        console.log(\"can't remove product as its not in the cart\");\n      }\n      state.products = newCart\n    },\n    emptyCart: (state, action)=>{\n        state.products = [];\n    },\n    setPreviousOrder: (state, action) => {\n      state.previousOrder = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { addToCart, removeFromCart, emptyCart, setPreviousOrder } = cartSlice.actions\n\nexport const selectCartproducts = state=> state.cart.products;\n\nexport const selectCartproductsById = createSelector(\n  [selectCartproducts, (_, id) => id],\n  (products, id) => products.filter(product => product.id === id)\n);\n\nexport const selectCartTotal = createSelector(\n  selectCartproducts,\n  products => products.reduce((total, product) => total + product.price, 0)\n);\n\nexport default cartSlice.reducer"],"mappings":";AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,QAAQ,UAAU;AAEzC,IAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,IAAMC,SAAS,GAAGL,WAAW,CAAC;EACnCM,IAAI,EAAE,MAAM;EACZJ,YAAY,EAAZA,YAAY;EACZK,QAAQ,EAAE;IACRC,SAAS,EAAE,SAAAA,UAACC,KAAK,EAAEC,MAAM,EAAK;MAC5BD,KAAK,CAACN,QAAQ,MAAAQ,MAAA,CAAAC,kBAAA,CAAOH,KAAK,CAACN,QAAQ,IAAEO,MAAM,CAACG,OAAO,EAAC;IACtD,CAAC;IACDC,cAAc,EAAE,SAAAA,eAACL,KAAK,EAAEC,MAAM,EAAK;MACjC,IAAIK,OAAO,GAAAH,kBAAA,CAAOH,KAAK,CAACN,QAAQ,CAAC;MACjC,IAAIa,YAAY,GAAGP,KAAK,CAACN,QAAQ,CAACc,SAAS,CAAC,UAAAC,OAAO;QAAA,OAAGA,OAAO,CAACC,EAAE,IAAET,MAAM,CAACG,OAAO,CAACM,EAAE;MAAA,EAAC;MACpF,IAAGH,YAAY,IAAE,CAAC,EAAC;QACjBD,OAAO,CAACK,MAAM,CAACJ,YAAY,EAAC,CAAC,CAAC;MAChC,CAAC,MAAI;QACHK,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAC5D;MACAb,KAAK,CAACN,QAAQ,GAAGY,OAAO;IAC1B,CAAC;IACDQ,SAAS,EAAE,SAAAA,UAACd,KAAK,EAAEC,MAAM,EAAG;MACxBD,KAAK,CAACN,QAAQ,GAAG,EAAE;IACvB,CAAC;IACDqB,gBAAgB,EAAE,SAAAA,iBAACf,KAAK,EAAEC,MAAM,EAAK;MACnCD,KAAK,CAACL,aAAa,GAAGM,MAAM,CAACG,OAAO;IACtC;EACF;AACF,CAAC,CAAC;AAGK,IAAAY,kBAAA,GAAmEpB,SAAS,CAACqB,OAAO;EAA5ElB,SAAS,GAAAiB,kBAAA,CAATjB,SAAS;EAAEM,cAAc,GAAAW,kBAAA,CAAdX,cAAc;EAAES,SAAS,GAAAE,kBAAA,CAATF,SAAS;EAAEC,gBAAgB,GAAAC,kBAAA,CAAhBD,gBAAgB;AAAsB,SAAAhB,SAAA,EAAAM,cAAA,EAAAS,SAAA,EAAAC,gBAAA;AAE3F,OAAO,IAAMG,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAGlB,KAAK;EAAA,OAAGA,KAAK,CAACmB,IAAI,CAACzB,QAAQ;AAAA;AAE7D,OAAO,IAAM0B,sBAAsB,GAAG5B,cAAc,CAClD,CAAC0B,kBAAkB,EAAE,UAACG,CAAC,EAAEX,EAAE;EAAA,OAAKA,EAAE;AAAA,EAAC,EACnC,UAAChB,QAAQ,EAAEgB,EAAE;EAAA,OAAKhB,QAAQ,CAAC4B,MAAM,CAAC,UAAAb,OAAO;IAAA,OAAIA,OAAO,CAACC,EAAE,KAAKA,EAAE;EAAA,EAAC;AAAA,CACjE,CAAC;AAED,OAAO,IAAMa,eAAe,GAAG/B,cAAc,CAC3C0B,kBAAkB,EAClB,UAAAxB,QAAQ;EAAA,OAAIA,QAAQ,CAAC8B,MAAM,CAAC,UAACC,KAAK,EAAEhB,OAAO;IAAA,OAAKgB,KAAK,GAAGhB,OAAO,CAACiB,KAAK;EAAA,GAAE,CAAC,CAAC;AAAA,CAC3E,CAAC;AAED,eAAe9B,SAAS,CAAC+B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}